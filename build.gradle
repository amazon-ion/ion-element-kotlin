/*
 * Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License").
 * You may not use this file except in compliance with the License.
 * A copy of the License is located at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * or in the "license" file accompanying this file. This file is distributed
 * on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either
 * express or implied. See the License for the specific language governing
 *  permissions and limitations under the License.
 */

// Documentation for using Gradle with Kotlin is here: https://kotlinlang.org/docs/reference/using-gradle.html

plugins {
    id 'java-library'
    id 'org.jetbrains.kotlin.jvm' version '1.3.72'
    id 'maven-publish'
    id 'signing'
    id 'org.jetbrains.dokka' version '0.9.18'
}

group = "com.amazon.ion"
version = "0.1.0-SNAPSHOT"

repositories {
    mavenCentral()

    // jcenter required for dokka
    jcenter()
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).all {
    kotlinOptions {
        jvmTarget = "1.8"
    }
}

dependencies {
    api 'com.amazon.ion:ion-java:[1.4.0,)'
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'

    testImplementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.6.2'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.6.2'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.6.2'
}

// Automatically pull in the ion-tests git submodule (so we don't have to remember to do it separately,
// also helps with Travis, etc)
task submodulesUpdate(type:Exec) {
    description 'Updates (and inits) git submodules'
    commandLine 'git', 'submodule', 'update', '--init', '--recursive'
    group 'Build Setup'
}

test {
    useJUnitPlatform()
    maxHeapSize = "4g"
}

dokka {
    outputFormat = "html"
    outputDirectory = "$buildDir/javadoc"
    //todo: includes = ["path/to/module.md"]
}

task sourcesJar(type: Jar) {
    from "src"
    classifier = "sources"
}

task javadocJar(type: Jar) {
    from dokka
    classifier = "javadoc"
}

java {
    sourceSets {
        main.java.srcDirs = ["src"]
        main.resources.srcDirs = ["resources"]
        test.java.srcDirs = ["test"]
        test.resources.srcDirs = ["test-resources"]
    }
}

plugins.withId('org.jetbrains.kotlin.jvm', { _ ->
    sourceSets {
        main.kotlin.srcDirs = ["src"]
        test.kotlin.srcDirs = ["test"]
    }
})

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = "ion-element"

            from components.java
            artifact sourcesJar
            artifact javadocJar

            pom {
                name = "Ion Element Kotlin"
                packaging = "jar"
                url = "https://github.com/amzn/ion-element-kotlin"
                description = "An immutable in-memory representation of Amazon Ion for Kotlin"
                scm {
                    connection = "scm:git@github.com:amzn/ion-element-kotlin.git"
                    developerConnection = "scm:git@github.com:amzn/ion-element-kotlin.git"
                    url = "git@github.com:amzn/ion-element-kotlin.git"
                }
                licenses {
                    license {
                        name = "The Apache License, Version 2.0"
                        url = "http://www.apache.org/licenses/LICENSE-2.0.txt"
                    }
                }
                developers {
                    developer {
                        name = "Amazon Ion Team"
                        email = "ion-team@amazon.com"
                        organization = "PartiQL"
                        organizationUrl = "https://github.com/partiql"
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url "https://aws.oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username ossrhUsername
                password ossrhPassword
            }
        }
    }
}

signing {
    // Allow publishing to maven local even if we don't have the signing keys
    // This works because when not required, the signing task will be skipped
    // if signing.keyId, signing.password, signing.secretKeyRingFile, etc are
    // not present in gradle.properties.
    required { !gradle.taskGraph.hasTask(":publishToMavenLocal") }
    sign publishing.publications.maven
}
